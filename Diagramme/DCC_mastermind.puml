@startuml
'https://plantuml.com/class-diagram 
 skinparam classAttributeIconSize 0 
skinparam classFontStyle Bold
skinparam style strictuml
hide empty members
package controller{

class PartieController{
+ <<Create>> PartieController()
+ changeStrategy(modestrategy : AfficheIndiceStrategy)
+ addCurrentTentative(nbTentative : Integer)
+ addCurentPionsCombi(nbPionsCombi : Integer)
+ addCurentManche(m : Integer)
+ addCouleurPossible()
+ affichage()
+ getNextColor(button : JButton, currentColorIndex : Integer, buttonIndex : Integer)
+ getNbTentative() : Integer
+ getNbPionsCombi() : Integer
+ getNbManche() : Integer
+ initializeManche()
+ testCombinaison(validate : Color[*])
+ hasWon() : boolean
+ getAfficheIndice() : ArrayList<String>
+ getStrategy() : AfficheIndiceStrategy
+ getManche() : Integer
+ addManche()
+ addNickName(pseudo : String)
+ getNickName() : String
+ addScore(score : Integer)
+ getScore() : Integer
+ getCombinaisonSecrete() : Color[*]

 }

 class MancheController{
 + <<Create>> MancheController()
 + initializeManche(nbPionsCombi : Integer, nbTentative : Integer, possibilite : Color[*], strategy : AfficheIndiceStrategy)
 + check_color(changement : Color[*])
 + hasWon() : boolean
 + getAfficheIndice() : ArrayList<String>
 + changeStrat(mode : AfficheIndiceStrategy)
 + getCombinaisonSecrete() : Color[*]

  }
 class Main{
 + <<Create>> Main()
 + {static} main(args : String[*])
  }
 }

 package model {
     class AffichageNumerique implements AfficheIndiceStrategy{
     + <<Create>> AffichageNumerique()
     + afficherIndice(indices : Indice[*]) : ArrayList<String>
     + NbBlanc(indices : Indice[*]) : Integer
     + NbNoir(indices : Indice[*]) : Integer

      }
     interface AfficheIndiceStrategy <<interface>>{
     + afficherIndice(indices : Indice[*]) : ArrayList<String>
      }

     class Partie{
     - manche : Integer
     + nbpions : Integer
     - mancheActuelle : Integer
     - name : String
     - score : Integer
     - nbpions_combi : Integer
     + nb_tentative : Integer
     + <<Create>> Partie()
     + change_strategy(c : AfficheIndiceStrategy)
     + setCouleurPossible()
     + NextColor(button : JButton, currentColorIndex : Integer, buttonIndex : Integer)
     + setNbManches(m : Integer)
     + setNbpions(nbp : Integer)
     + setNbpions_combi(nbc : Integer)
     + setNbTentatives(t : Integer)
     + addObserveurs(b : ButtonObserveur)
     + notifyChanges(button : JButton, color : Color)
     + getNbpions_combi() : Integer
     + getNbTentatives() : Integer
     + getNbManche() : Integer
     + getCouleurPossible() : Color[*]
     + getStrategy() : AfficheIndiceStrategy
     + getMancheActuelle() : Integer
     + addManche()
     + Affichage()
     + setNickName(pseudo : String)
     + getNickName() : String
     + getScore() : Integer
     + setScore(score : Integer)
      }

      interface ButtonObserveur <<interface>>{
      + updateButtons(button : JButton, color : Color)

       }
      class AffichageFacile implements AfficheIndiceStrategy{
      + <<Create>> AffichageFacile()
      + afficherIndice(indices : Indice[*]) : ArrayList<String>
       }

      enum Indice <<enum>> {
      BONNE_PLACE
      MAUVAISE_PLACE
      INCORRECT
       }

      class AffichageClassique implements AfficheIndiceStrategy{
      + <<Create>> AffichageClassique()
      + afficherIndice(indices : Indice[*]) : ArrayList<String>
      + NbBlanc(indices : Indice[*]) : Integer
      + NbNoir(indices : Indice[*]) : Integer
       }

      class Manche{
      - taille_combi : Integer
      + <<Create>> Manche(nbpions_combi : Integer, nb_tentative : Integer, possible : Color[*], strategy : AfficheIndiceStrategy)
      + setCombiSecrete()
      + getAfficheIndice() : ArrayList<String>
      + affiche_combisecrete()
      + changeColor(changement : Color[*])
      + creeIndice()
      + estGagnee() : boolean
      + afficheIndice()
      + changeStrat(mode : AfficheIndiceStrategy)
      + getCombinaisonSecrete() : Color[*]

       }
 }

 package utils{
    class ColorSwap{
    + <<Create>> ColorSwap()
    + {static} getColorName(color : Color[*]) : String
     }
}

package view {
    class GameWindow extends JFrame implements ButtonObserveur{
    - LigneActuelle : Integer
    - mainPanel : JPanel
    - countTenta : Integer
    - buttons : ArrayList<JButton> <<final>>
    - ListeIndice : JArrayList<JButton> <<final>>
    - lignePanels : ArrayList<JPanel>
    - ligneButtons : ArrayList<ArrayList<JButton>>
    + <<Create>> GameWindow(pc : PartieController)
    - initializeUI()
    - CreateLine()
    - createColorButton(buttonIndex : Integer) : JButton
    - createIndiceButtons() : JButton[*]
    + updateButtons(button : JButton, color : Color)
    + updateIndiceButtons(indices : ArrayList<String>)
    + getValidationTableau(ligneButtons : ArrayList<JButton>) : Color[*]
     }

    class StartWindow extends JFrame{
    - cardLayout : CardLayout
    - cardPanel : JPanel
    - pseudo : String
    + <<Create>> StartWindow()
    - initializeUI()
    - createFirstCardPanel() : JPanel
    - createSecondCardPanel() : JPanel
    - createSliderPanel(label : String, slider : JSlider) : JPanel
    - createSlider(min : Integer, max : Integer, initial : Integer) : JSlider
     }

     class ObserveurConcretButton implements ButtonObserveur{
           + <<Create>> ObserveurConcretButton()
           + updateButtons(button : JButton, color : Color)
            }

     class EndWindow extends JFrame{
     + <<Create>> EndWindow(controller : PartieController)
      }
}

view.GameWindow "1\t" --o " 1\n -controller <<final>> "PartieController  : utilise >
MancheController "1\t" --o " *1\n manche "model.Manche : controlle >
model.Partie "1..*\t"--o " *\n -couleur_possible\n\n "java.awt.Color : a pour >
model.Partie "1..*\t" --o " 1\n -context "model.AfficheIndiceStrategy : utilise >
model.Partie "1..*\t" --o " *\n -observers <<final>> \n" model.ButtonObserveur: observe <
model.Partie "1..*\t" --o " 1\n\t\t -ob " view.ObserveurConcretButton : observe <
PartieController "1\t" --o " 1\n -partie <<final>> "model.Partie : controlle >
PartieController "1\t" --o " 1\n -mancheController <<final>>" MancheController : utilise >
model.Manche "1..3 \t"--o " 1\n -context "model.AfficheIndiceStrategy : utilise >
model.Manche "1..*\t" --o " *\n -combinaison_secrete <<final>>   "java.awt.Color : crée >
model.Manche "1..*\t" --o " *\n -combinaison_actuelle      "java.awt.Color : crée >
model.Manche "1..*\t"--o " *\n -indices "model.Indice : crée >
model.Manche "1..*\t"--o " \n\n *\n possibilite "java.awt.Color : a pour >
controller.Main  "\t1" --> "\t1" view.StartWindow : Appel >
view.ObserveurConcretButton "\t1" --> "\t1" utils.ColorSwap : <<use>> >
model.Manche "1" --> "\t1" utils.ColorSwap : <<use>> >

@enduml
