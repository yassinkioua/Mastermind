@startuml
'https://plantuml.com/class-diagram

skinparam style strictuml
skinparam classAttributeIconSize 0
skinparam classFontStyle Bold
hide enum methods
hide interface attributes

package controller
{
    class GameController{}
}

package model
{
    class Partie
    {
        - manche: int
        - nbpions: int
        - nbpions_combi: int
        - nb_tentative: int

        + Partie()
        + play()
        + setCouleurPossible(): Couleur[]
        + setManche(m: int)
        + setNbpions(nbp: int)
        + setNbpions_combi(nbc: int)
        + setNb_tentative(t: int)
    }

    class Manche
    {
        - combinaison_secrete: Couleur[]
        - combinaison_actuelle: Couleur[]
        - indices: Indice[]
        - taille_combi: int
        - nbtentative: int
        - possibilite: Couleur[]

        + Manche(nbpions_combi: int, nb_tentative: int, possible: Couleur[])
        + setCombiSecrete()
        + affiche_combi()
        + affiche_combisecrete()
        + Change_Color(changement: Couleur[])
        + Cree_Indice()
        + affiche_indice()
    }

    enum Indice
    {
        BONNE_PLACE, MAUVAISE_PLACE, INCORRECT
    }

    interface CreateIndiceStrategy <<interface>>
    {
        + CreerIndice(indices: Indice[]): Indice[]
    }

    class CreationFacile implements CreateIndiceStrategy
    {
        + CreerIndice(indices: Indice[]): Indice[]
    }

    class CreationClassique implements CreateIndiceStrategy
    {
        + CreerIndice(indices: Indice[]): Indice[]
    }

    class CreationNumerique implements CreateIndiceStrategy
    {
        + CreerIndice(indices: Indice[]): Indice[]
    }

    interface Observeur <<interface>>
    {
        +updateIndice(Indice indice)
    }

}

package view
{
    class StartWindow
    {
        - cardLayout: CardLayout
        - cardPanel: JPanel
        - playerNameTextField: JTextField
        - nextButton: JButton
        - roundsSlider: JSlider
        - roundsPerMatchSlider: JSlider
        - attemptsSlider: JSlider
        - pinsPerCombinationSlider: JSlider
        - backButton: JButton
        - startGameButton: JButton

        + StartWindow()
        - initializeUI()
        - createFirstCardPanel(): JPanel
        - createSecondCardPanel(): JPanel
        - createSliderPanel(label: String, slider: JSlider): JPanel
        - createSlider(min: int, max: int, initial: int): JSlider
    }

    class ObserverConcret implements model.Observeur
    {
        + updateIndice(indice: Indice)
    }

    class GameWindow implements model.Observeur
    {
        + GameWindow(p: Partie)
        + updateIndice(indice: Indice)
    }

    class EndWindow
    {
        + EndWindow()
    }
}


model.Manche --> model.Indice : utilise
model.Manche --> view.ObserverConcret : notifie
view.StartWindow --> model.Partie : utilise
view.GameWindow --> model.Partie : utilise
view.EndWindow --> model.Partie : utilise
@enduml